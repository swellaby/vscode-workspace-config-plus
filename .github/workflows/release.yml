name: release
on:
  push:
    branches:
      - main

jobs:
  prep:
    ## To ensure Windows and non-Windows binaries are obtained
    runs-on: windows-latest
    name: cd-prep

    outputs:
      version: ${{ steps.package.outputs.version }}

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: install dependencies
        run: npm install

      - name: create vsix
        id: package
        shell: bash
        run: |
          git checkout main
          git config user.name swellbot
          git config user.email opensource@swellaby.com
          npm run package:vsix -- patch -m "chore: bump version [skip ci]"
          echo ::set-output name=version::$(node -e "console.log(require('./package.json').version);")

      - name: archive workspace
        shell: bash
        run: |
          mkdir -p ../staging
          cp -ar ./. ../staging/
          tar -C ../staging -czf workspace.tar.gz .

      - uses: actions/upload-artifact@v2
        with:
          name: workspace
          path: ./workspace.tar.gz

  unit-tests:
    needs: prep
    runs-on: ${{ matrix.runner }}-latest
    name: cd-${{ matrix.os }}-unit-tests-node-v${{ matrix.node-version }}

    strategy:
      fail-fast: false
      matrix:
        node-version: [12, 14, 15, 16]
        os: [linux, mac, windows]
        include:
          - os: linux
            runner: ubuntu
          - os: windows
            runner: windows
          - os: mac
            runner: macos

    steps:
      - name: download workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: extract workspace archive
        shell: bash
        run: |
          tar  -xzf ./workspace.tar.gz
          ls -la

      - name: use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: run unit tests
        run: npm test

  lint:
    needs: prep
    runs-on: ubuntu-latest
    name: cd-lint

    steps:
      - name: download workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: extract workspace archive
        shell: bash
        run: |
          tar  -xzf ./workspace.tar.gz
          ls -la

      - name: use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: run lint check
        run: npm run lint

  format:
    needs: prep
    runs-on: ubuntu-latest
    name: cd-format

    steps:
      - name: download workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: extract workspace archive
        shell: bash
        run: |
          tar  -xzf ./workspace.tar.gz
          ls -la

      - name: use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: run formatting check
        run: npm run format:check

  sonar:
    runs-on: ubuntu-latest
    needs: prep
    name: cd-sonar

    steps:
      - name: download workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: extract workspace archive
        shell: bash
        run: |
          tar  -xzf ./workspace.tar.gz
          ls -la

      - name: use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: run build script
        run: npm run coverage

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectVersion=${{ needs.prep.outputs.version }}

  publish:
    runs-on: ubuntu-latest
    name: cd-publish
    # be sure to keep dependency on `prep` to maintain access to the output variable
    needs: [prep, lint, format, sonar, unit-tests]
    environment: publish

    steps:
      - name: download workspace
        uses: actions/download-artifact@v2
        with:
          name: workspace

      - name: extract workspace archive
        run: |
          tar -xzf ./workspace.tar.gz
          ls -la
          ls -la .vsix

      - name: push artifacts
        run: |
          git config user.name swellbot
          git config user.email opensource@swellaby.com
          git status
          git checkout main
          git push \
            -c http.extraheader="AUTHORIZATION: basic ${{ secrets.GH_TOKEN }}" \
            --atomic origin main v${{ needs.prep.outputs.version }}
          npm run publish:vsix -- -p ${{ secrets.VSCE_PAT }}

      - name: create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: .vsix/*.vsix
          prerelease: true
          tag: v${{ needs.prep.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
